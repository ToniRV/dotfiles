#!/bin/bash

# Specific aliases for working with ROS
alias rosenv='env | grep ROS | grep -v ROS_PACKAGE_PATH'
alias rospath='echo -e ${ROS_PACKAGE_PATH//:/\\n}'

# Check if we have sourced a ros workspace
path_array=()
if [[ -n "$ROSLISP_PACKAGE_DIRECTORIES" ]]; then
  # Parse catkin_workspace env variable, to get all workspaces.
  IFS=: read -r -d '' -a path_array < <(printf '%s:\0' "$ROSLISP_PACKAGE_DIRECTORIES")
fi;

#source /opt/ros/melodic/setup.bash

# Source Workspace if it was previously sourced already
if [ ${#path_array[@]} -ne 0 ]; then
  for workspace in "${path_array[@]}"; do
    source "${workspace%"share/common-lisp"}"/setup.bash --extend
  done
fi

# Function to source a workspace and to set
# a env var for the prompting the workspace
# Usage: sws <workspace_name>
# All workspace names should be at home
# directory and be prefixed by ws_
function sws {
  source $HOME/ws_$1/devel/setup.bash
  export CATKIN_WORKSPACE="$HOME/ws_$1"
}

# Aliases to source the correct workspace
alias sros='source /opt/ros/melodic/setup.bash'
alias svnav='sws vnav'
alias straj='sws trajectory_generation'
alias smaplab='sws maplab'
alias smuma='sws muma'
alias smav='sws mav'
alias scatkin='sws catkin'
alias skalibr='sws kalibr'
alias seye='sws zurich_eye'
alias siros='sws iros'
alias sgoggles="source $HOME/Code/ROS/flight_goggles_ws/devel/setup.bash"
alias srotors="source $HOME/Code/ROS/rotors_ws/devel/setup.bash"
alias sspark="source $HOME/Code/ROS/spark_vio_ws/devel/setup.bash"
alias stess="source $HOME/Code/ROS/tess_ws/devel/setup.bash"
alias sslam="source $HOME/Code/SLAM/SLAM_ws/devel/setup.bash"
alias sflame="source $HOME/Code/ROS/flame_ws/devel/setup.bash"
alias selas="source $HOME/Code/ROS/elas_ws/devel/setup.bash"
alias srosmitnet="sros &
source /home/tonirv/Code/ROS/spark_vio_ws/src/rosmitnet/venv/bin/activate --extend &
source /home/tonirv/Code/ROS/spark_vio_ws/devel/setup.bash &
source /home/tonirv/Code/ROS/cv_bridge_py3_ws/install/setup.bash --extend &
"

# Uncomment this if you are not using node_manager
path_ros="$HOME/.bash.d/ros"
ip_ros=$(cat $path_ros/ros_ip)
master_uri=$(cat $path_ros/ros_master_uri)
export ROS_IP=$ip_ros
export ROS_HOSTNAME=$ROS_IP
export ROS_MASTER_URI=http://$master_uri:11311

# Shortcut to change ROS server URI
# Usage: rosmaster [localhost|me|10.131.xx.yy] [eth0|wlan0|eth2...]
function rosmaster() {
  local ip_master=${1:-localhost}
  export ROS_MASTER_URI=http://$ip_master:11311
  echo "$ip_master" > $path_ros/ros_master_uri
}

# Shortcut to change ROS IP
# Usage: rosip [eth0|wlan0|lo|eth1...]
function rosip () {
  local interface=${1:-lo}
  local inet_addr=$(ifconfig $interface | grep "inet " | awk -F'[: ]+' '{ print $4 }')
  echo "$inet_addr" > $path_ros/ros_ip
  if [ -n "$inet_addr" ]; then
    export ROS_IP=$inet_addr
    export ROS_HOSTNAME=$ROS_IP
  else
    export ROS_IP=localhost
    export ROS_HOSTNAME=$ROS_IP
  fi
}

# Usage: cattest <package name> [OPTIONS|--no-deps|...]
function cattest() {
  catkin build $1 "${@:2}" --workspace $CATKIN_WORKSPACE --catkin-make-args run_tests
  catkin_test_results $CATKIN_WORKSPACE/build/$1 --verbose
}

# Weird flag to make it run in RPG lab Optitrack
# Allow ssh to launch remote nodes. This is required for Optitrack flights.
export ROSLAUNCH_SSH_UNKNOWN=1
